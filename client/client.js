// Generated by LiveScript 1.2.0
(function(){
  var ioClient, url, events, Ref;
  ioClient = require('socket.io-client');
  url = require('url');
  events = require('events');
  Ref = (function(){
    Ref.displayName = 'Ref';
    var prototype = Ref.prototype, constructor = Ref;
    function Ref(uri){
      var ref$;
      ref$ = url.parse(uri), this.host = ref$.host, this.pathname = ref$.pathname;
      ref$ = this.pathname.split('/'), this.tbl = ref$[1], this.id = ref$[2], this.col = ref$[3];
      if (this.col) {
        this.refType = 'column';
      } else if (this.id) {
        this.refType = 'entry';
      } else if (this.tbl) {
        this.refType = 'collection';
      } else {
        this.refType = 'root';
      }
      this.socket = ioClient.connect("http://" + this.host, {
        transports: ['websocket'],
        'force new connection': true
      });
      this.socket.on('error', function(it){
        console.log('error', it);
        throw it;
      });
    }
    prototype.on = function(event, cb, subscribeCompleteCb){
      var this$ = this;
      this.socket.on(this.tbl + ":" + event, function(it){
        return cb(it);
      });
      if (event === 'value') {
        this.socket.emit("GETALL:" + this.tbl, function(it){
          return typeof cb === 'function' ? cb(it) : void 8;
        });
      }
      this.socket.emit("SUBSCRIBE:" + this.tbl + ":" + event, function(){
        return typeof subscribeCompleteCb === 'function' ? subscribeCompleteCb() : void 8;
      });
    };
    prototype.set = function(value, cb){
      return this.socket.emit("PUT:" + this.tbl, {
        body: value
      }, function(it){
        return typeof cb === 'function' ? cb(it) : void 8;
      });
    };
    prototype.push = function(value, cb){
      return this.socket.emit("POST:" + this.tbl, {
        body: value
      }, function(it){
        return typeof cb === 'function' ? cb(it) : void 8;
      });
    };
    prototype.remove = function(value, cb){
      return this.socket.emit("DELETE:" + this.tbl, function(it){
        return typeof cb === 'function' ? cb(it) : void 8;
      });
    };
    prototype.off = function(event){
      return this.socket.removeAllListeners(event);
    };
    return Ref;
  }());
  exports.Ref = Ref;
}).call(this);
