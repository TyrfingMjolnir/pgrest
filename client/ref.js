// Generated by LiveScript 1.2.0
var ioClient, url, events, CollectionRef, ColumnRef, EntryRef, Ref;
ioClient = require('socket.io-client');
url = require('url');
events = require('events');
CollectionRef = (function(){
  CollectionRef.displayName = 'CollectionRef';
  var prototype = CollectionRef.prototype, constructor = CollectionRef;
  function CollectionRef(uri, opt){
    var ref$, conf;
    ref$ = url.parse(uri), this.host = ref$.host, this.pathname = ref$.pathname;
    ref$ = this.pathname.split('/'), this.tbl = ref$[1], this.id = ref$[2], this.col = ref$[3];
    if (this.tbl && !this.id && !this.col) {
      this.refType = 'collection';
    } else {
      throw this.pathname + " is not a collection";
    }
    this.opt = opt;
    conf = {
      transports: ['websocket'],
      'connect timeout': 999999,
      'reconnect': true,
      'reconnection delay': 500,
      'reopen delay': 500
    };
    if ((ref$ = this.opt) != null && ref$.force) {
      conf['force new connection'] = true;
    }
    console.log('construct', opt);
    this.socket = ioClient.connect("http://" + this.host, conf);
    this.socket.on('error', function(it){
      console.log('error', it);
      throw it;
    });
  }
  prototype.on = function(event, cb){
    var this$ = this;
    this.socket.on(this.tbl + ":" + event, cb);
    if (event === 'value') {
      this.socket.emit("SUBSCRIBE:" + this.tbl + ":" + event, function(){
        console.log("SUBSCRIBE:" + this$.tbl + ":" + event + " compeleted");
        return this$.socket.emit("GETALL:" + this$.tbl, function(it){
          console.log("GET:" + this$.tbl + " completed");
          return typeof cb === 'function' ? cb(it) : void 8;
        });
      });
    } else {
      this.socket.emit("SUBSCRIBE:" + this.tbl + ":" + event, function(){
        return console.log("SUBSCRIBE:" + this$.tbl + ":" + event + " compeleted");
      });
    }
  };
  prototype.set = function(value, cb){
    return this.socket.emit("PUT:" + this.tbl, {
      body: value
    }, function(it){
      return typeof cb === 'function' ? cb(it) : void 8;
    });
  };
  prototype.push = function(value, cb){
    return this.socket.emit("POST:" + this.tbl, {
      body: value
    }, function(it){
      return typeof cb === 'function' ? cb(it) : void 8;
    });
  };
  prototype.update = function(value, cb){
    throw Error('unimplemented');
  };
  prototype.remove = function(cb){
    return this.socket.emit("DELETE:" + this.tbl, function(it){
      return typeof cb === 'function' ? cb(it) : void 8;
    });
  };
  prototype.off = function(event, cb){
    var i$, ref$, len$, l, results$ = [];
    if (cb) {
      for (i$ = 0, len$ = (ref$ = this.socket.listeners(this.tbl + ":" + event)).length; i$ < len$; ++i$) {
        l = ref$[i$];
        if (l === cb) {
          results$.push(this.socket.removeListener(this.tbl + ":" + event, l));
        }
      }
      return results$;
    } else {
      return this.socket.removeAllListeners(this.tbl + ":" + event);
    }
  };
  prototype.once = function(event, cb){
    var once_cb, this$ = this;
    once_cb = function(it){
      this$.off(event, once_cb);
      return cb(it);
    };
    return this.on(event, once_cb);
  };
  prototype.toString = function(){
    return "http://" + this.host + this.pathname;
  };
  prototype.root = function(){
    return "http://" + this.host;
  };
  prototype.name = function(){
    return this.tbl;
  };
  prototype.parent = function(){
    console.log('parent', this.opt);
    throw Error('unimplemented');
  };
  prototype.child = function(it){
    console.log('child', it, this.opt);
    return new Ref(this.toString() + "/" + it, this.opt);
  };
  return CollectionRef;
}());
ColumnRef = (function(){
  ColumnRef.displayName = 'ColumnRef';
  var prototype = ColumnRef.prototype, constructor = ColumnRef;
  function ColumnRef(uri, opt){
    var ref$, conf;
    ref$ = url.parse(uri), this.host = ref$.host, this.pathname = ref$.pathname;
    ref$ = this.pathname.split('/'), this.tbl = ref$[1], this.id = ref$[2], this.col = ref$[3];
    if (this.tbl && this.id && this.col) {
      this.refType = 'column';
      this.id = parseInt(this.id, 10);
    } else {
      throw this.pathname + " is not a column";
    }
    this.opt = opt;
    conf = {
      transports: ['websocket'],
      'connect timeout': 999999,
      'reconnect': true,
      'reconnection delay': 500,
      'reopen delay': 500
    };
    if ((ref$ = this.opt) != null && ref$.force) {
      conf['force new connection'] = true;
    }
    console.log('construct', opt);
    this.socket = ioClient.connect("http://" + this.host, conf);
    this.socket.on('error', function(it){
      console.log('error', it);
      throw it;
    });
  }
  prototype.on = function(event, cb){
    var filtered_cb, this$ = this;
    switch (event) {
    case 'value':
      this.bare_cbs == null && (this.bare_cbs = {});
      filtered_cb = function(it){
        if (it._id === this.id) {
          return cb(it[this.col]);
        }
      };
      this.socket.on(this.tbl + ":child_changed", filtered_cb);
      this.bare_cbs[cb] = filtered_cb;
      console.log("SUBSCRIBing:" + this.tbl + ":child_changed");
      this.socket.emit("SUBSCRIBE:" + this.tbl + ":child_changed", function(){
        console.log("SUBSCRIBE:" + this$.tbl + ":child_changed completed");
        return this$.socket.emit("GET:" + this$.tbl, {
          _id: this$.id,
          _column: this$.col
        }, function(it){
          console.log("GET:" + this$.tbl + " completed");
          return typeof cb === 'function' ? cb(it) : void 8;
        });
      });
      break;
    case 'child_added':
      throw Error('unimplemented');
    case 'child_changed':
      throw Error('unimplemented');
    case 'child_removed':
      throw Error('unimplemented');
    }
  };
  prototype.set = function(value, cb){
    var ref$;
    return this.socket.emit("PUT:" + this.tbl, {
      _id: this.id,
      body: (ref$ = {}, ref$[this.col + ""] = value, ref$),
      u: true
    }, function(it){
      return typeof cb === 'function' ? cb(it) : void 8;
    });
  };
  prototype.push = function(value, cb){
    throw Error('unimplemented');
  };
  prototype.update = function(value, cb){
    throw Error('unimplemented');
  };
  prototype.remove = function(cb){
    var ref$;
    return this.socket.emit("PUT:" + this.tbl, {
      _id: this.id,
      body: (ref$ = {}, ref$[this.col + ""] = null, ref$),
      u: true
    }, function(it){
      return typeof cb === 'function' ? cb(it) : void 8;
    });
  };
  prototype.off = function(event, cb){
    if (event === 'value') {
      if (cb) {
        if (this.bare_cbs[cb]) {
          return this.socket.removeListener(this.tbl + ":child_changed", this.bare_cbs[cb]);
        }
      } else {
        return this.socket.removeAllListeners(this.tbl + ":child_changed");
      }
    } else {
      throw Error('unimplemented');
    }
  };
  prototype.once = function(event, cb){
    var once_cb, this$ = this;
    once_cb = function(it){
      this$.off(event, once_cb);
      return cb(it);
    };
    return this.on(event, once_cb);
  };
  prototype.toString = function(){
    return "http://" + this.host + this.pathname;
  };
  prototype.root = function(){
    return "http://" + this.host;
  };
  prototype.name = function(){
    return this.col;
  };
  prototype.parent = function(){
    return new Ref(this.root() + "/" + this.tbl + "/" + this.id, this.opt);
  };
  prototype.child = function(){
    throw Error('unimplemented');
  };
  return ColumnRef;
}());
EntryRef = (function(){
  EntryRef.displayName = 'EntryRef';
  var prototype = EntryRef.prototype, constructor = EntryRef;
  function EntryRef(uri, opt){
    var ref$, conf;
    ref$ = url.parse(uri), this.host = ref$.host, this.pathname = ref$.pathname;
    ref$ = this.pathname.split('/'), this.tbl = ref$[1], this.id = ref$[2], this.col = ref$[3];
    if (this.tbl && this.id && !this.col) {
      this.refType = 'entry';
      this.id = parseInt(this.id, 10);
    } else {
      throw this.pathname + " is not an entry";
    }
    this.opt = opt;
    conf = {
      transports: ['websocket'],
      'connect timeout': 999999,
      'reconnect': true,
      'reconnection delay': 500,
      'reopen delay': 500
    };
    if ((ref$ = this.opt) != null && ref$.force) {
      conf['force new connection'] = true;
    }
    console.log('construct', opt);
    this.socket = ioClient.connect("http://" + this.host, conf);
    this.socket.on('error', function(it){
      console.log('error', it);
      throw it;
    });
  }
  prototype.on = function(event, cb){
    var filtered_cb, this$ = this;
    switch (event) {
    case 'value':
      this.bare_cbs == null && (this.bare_cbs = {});
      filtered_cb = function(it){
        if (it._id === this.id) {
          return cb(it);
        }
      };
      this.socket.on(this.tbl + ":child_changed", filtered_cb);
      this.bare_cbs[cb] = filtered_cb;
      console.log("SUBSCRIBing:" + this.tbl + ":child_changed");
      this.socket.emit("SUBSCRIBE:" + this.tbl + ":child_changed", function(){
        console.log("SUBSCRIBE:" + this$.tbl + ":child_changed completed");
        return this$.socket.emit("GET:" + this$.tbl, {
          _id: this$.id
        }, function(it){
          console.log("GET:" + this$.tbl + " completed");
          return typeof cb === 'function' ? cb(it) : void 8;
        });
      });
      break;
    case 'child_added':
      throw Error('unimplemented');
    case 'child_changed':
      throw Error('unimplemented');
    case 'child_removed':
      throw Error('unimplemented');
    }
  };
  prototype.set = function(value, cb){
    return this.socket.emit("PUT:" + this.tbl, {
      body: value,
      u: true
    }, function(it){
      return typeof cb === 'function' ? cb(it) : void 8;
    });
  };
  prototype.push = function(value, cb){
    throw Error('unimplemented');
  };
  prototype.update = function(value, cb){
    return this.socket.emit("PUT:" + this.tbl, {
      body: value,
      u: true
    }, function(it){
      return typeof cb === 'function' ? cb(it) : void 8;
    });
  };
  prototype.remove = function(cb){
    return this.socket.emit("DELETE:" + this.tbl, {
      _id: this.id
    }, function(it){
      return typeof cb === 'function' ? cb(it) : void 8;
    });
  };
  prototype.off = function(event, cb){
    if (event === 'value') {
      if (cb) {
        if (this.bare_cbs[cb]) {
          return this.socket.removeListener(this.tbl + ":child_changed", this.bare_cbs[cb]);
        }
      } else {
        return this.socket.removeAllListeners(this.tbl + ":child_changed");
      }
    } else {
      throw Error('unimplemented');
    }
  };
  prototype.once = function(event, cb){
    var once_cb, this$ = this;
    once_cb = function(it){
      if (it._id === this$.id) {
        this$.off(event, once_cb);
        return cb(it);
      }
    };
    return this.on(event, once_cb);
  };
  prototype.toString = function(){
    return "http://" + this.host + this.pathname;
  };
  prototype.root = function(){
    return "http://" + this.host;
  };
  prototype.name = function(){
    return this.id;
  };
  prototype.parent = function(){
    return new Ref(this.root() + "/" + this.tbl, this.opt);
  };
  prototype.child = function(it){
    return new Ref(this.toString() + "/" + it, this.opt);
  };
  return EntryRef;
}());
Ref = (function(){
  Ref.displayName = 'Ref';
  var prototype = Ref.prototype, constructor = Ref;
  function Ref(uri, opt){
    var ref$;
    ref$ = url.parse(uri), this.host = ref$.host, this.pathname = ref$.pathname;
    ref$ = this.pathname.split('/'), this.tbl = ref$[1], this.id = ref$[2], this.col = ref$[3];
    if (this.col) {
      return new ColumnRef(uri, opt);
    } else if (this.id) {
      return new EntryRef(uri, opt);
    } else if (this.tbl) {
      return new CollectionRef(uri, opt);
    }
  }
  return Ref;
}());
exports.Ref = Ref;